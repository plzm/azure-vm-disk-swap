name: 01-Deploy-Infrastructure

on: 
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt

      - name: Set Environment Variables
        if: success()
        env:
          SP_OBJECT_ID: ${{ secrets.SP_OBJECT_ID }}
        run: |
          chmod +x ./scripts/set-env-vars.sh
          ./scripts/set-env-vars.sh

      - name: Create Resource Groups
        if: success()
        run: |
          chmod +x ./scripts/01-deploy-infra/01-deploy-rgs.sh
          ./scripts/01-deploy-infra/01-deploy-rgs.sh

      - name: Deploy User-Assigned MI
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RG_NAME_SECURITY }}
          deploymentName: ${{ env.USERNAME_UAMI }}
          template: ${{ env.TEMPLATE_UAMI }}
          parameters: location=${{ env.LOCATION }} tenantId=${{ env.TENANT_ID }} identityName=${{ env.USERNAME_UAMI }}

      - name: Deploy Key Vault
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RG_NAME_SECURITY }}
          deploymentName: ${{ env.KEYVAULT_NAME }}
          template: ${{ env.TEMPLATE_KEYVAULT }}
          parameters: location=${{ env.LOCATION }} tenantId=${{ env.TENANT_ID }} keyVaultName=${{ env.KEYVAULT_NAME }} skuName=${{ env.KEYVAULT_SKU_NAME }} enableSoftDelete=${{ KEYVAULT_SOFT_DELETE }}

      - name: Deploy NSG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RG_NAME_NET }}
          deploymentName: ${{ env.NSG_NAME }}
          template: ${{ env.TEMPLATE_NSG }}
          parameters: location=${{ env.LOCATION }} nsgName=${{ env.NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_RULE_INBOUND_100_SRC }}

      - name: Deploy VNet
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RG_NAME_NET }}
          deploymentName: ${{ env.VNET_NAME }}
          template: ${{ env.TEMPLATE_VNET }}
          parameters: |
            location=${{ env.LOCATION }} vnetName=${{ env.VNET_NAME }} vnetPrefix=${{ env.VNET_PREFIX }} enableDdosProtection=${{ env.VNET_ENABLE_DDOS_PROTECTION }} enableVmProtection=${{ env.VNET_ENABLE_VM_PROTECTION }}

      - name: Deploy Subnet
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RG_NAME_NET }}
          deploymentName: ${{ env.SUBNET_NAME }}
          template: ${{ env.TEMPLATE_SUBNET }}
          parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.SUBNET_NAME }} subnetPrefix=${{ env.SUBNET_PREFIX }} nsgResourceGroup=${{ env.RG_NAME_NET }} nsgName=${{ env.NSG_NAME }} serviceEndpoints=${{ env.SUBNET_SERVICE_ENDPOINTS }} privateEndpointNetworkPolicies=${{ env.SUBNET_PRIVATE_ENDPOINT_NETWORK_POLICIES }} privateLinkServiceNetworkPolicies=${{ env.SUBNET_PRIVATE_LINK_NETWORK_POLICIES }}

      - name: Deploy Azure Compute Gallery
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RG_NAME_SIG }}
          deploymentName: ${{ env.SIG_NAME }}
          template: ${{ env.TEMPLATE_COMPUTE_GALLERY }}
          parameters: |
            location=${{ env.LOCATION }} gallery-name=${{ env.SIG_NAME }} 

      - name: Azure logout
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
